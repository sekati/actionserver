/** * DemoView * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2010  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package {	import sekati.display.Canvas;		import sekati.math.MathBase;		import sekati.utils.ColorUtil;		import sekati.draw.Rect;		import sekati.core.App;	import sekati.log.Logger;	import sekati.net.PersistentXMLSocket;	import sekati.views.AbstractLiquidView;	import flash.events.DataEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.system.Security;			/**	 * DemoView provides the main view to the demo.	 */	final public class DemoView extends AbstractLiquidView {		public static const POLICY_SERVER : String = App.db.config.custom.sockets.policy.@server;		public static const POLICY_PORT : String = App.db.config.custom.sockets.policy.@port;		public static const POLICY_URL : String = "xmlsocket://" + POLICY_SERVER + ":" + POLICY_PORT;		//				public static const SOCKET_SERVER : String = App.db.config.custom.sockets.socket.@server;		public static const SOCKET_PORT : int = App.db.config.custom.sockets.socket.@port;		public static const SOCKET_CHANNEL : String = App.db.config.custom.sockets.socket.@channel;		public static const SOCKET_URL : String = "xmlsocket://" + SOCKET_SERVER Â  + ":" + SOCKET_PORT;			//		private var sekatiSock : PersistentXMLSocket;		/**		 * DemoView		 */		public function DemoView() {			super( );		}		/**		 * @inheritDoc		 */		override protected function configUI() : void {			initPolicySocket( );			initSekatiActionServerSocket( );					}		// SOCKET INITS				/**		 * Initialize the Policy Socket Connection.		 */		private function initPolicySocket() : void {			try {				Security.loadPolicyFile( POLICY_URL ); 				Logger.$.notice( this, "Connecting to the Socket Policy Server ... (" + POLICY_URL + ")" );				} catch(e : Error) {				Logger.$.fatal( this, "Fatal Error caught (" + e.message + ") while attempting to connect to the socket policy server!" );				}		}		/**		 * Initialize the sekati socket.		 */		private function initSekatiActionServerSocket() : void {			Logger.$.notice( this, "Connecting to Sekati Socket Server ... " + SOCKET_URL );			try {				sekatiSock = new PersistentXMLSocket( SOCKET_SERVER, SOCKET_PORT );				sekatiSock.addEventListener( Event.CONNECT, socketConnectHandler );				sekatiSock.addEventListener( Event.CLOSE, socketCloseHandler );				sekatiSock.addEventListener( DataEvent.DATA, socketDataHandler );					// if we fail to connect we need to bail to a failover xml instead of socket data ...				sekatiSock.addEventListener( IOErrorEvent.IO_ERROR, failHandler );				sekatiSock.addEventListener( SecurityErrorEvent.SECURITY_ERROR, failHandler );							} catch(e : Error) {				Logger.$.fatal( this, "Fatal Error caught (" + e.message + ") while connecting to socket server." );			}		}		/**		 * Handle failure events		 */		private function failHandler(e : Event) : void {			Logger.$.fatal( this, "Fatal Error Event caught (" + e.type + ") while connecting to socket server." );		}			// SOCKET HANDLERS				/**		 * Respond to the socket connection.		 */				private function socketConnectHandler(event : Event) : void {			sekatiSock.removeEventListener( Event.CONNECT, socketConnectHandler );			joinSocketChannel( );			sendHelloWorld( );		}		/**		 * Respond to socket disconnects.		 */		private function socketCloseHandler(e : Event) : void {			sekatiSock.removeEventListener( Event.CLOSE, socketCloseHandler );			Logger.$.warn( this, "Sekati Socket Closed! (" + SOCKET_URL + ")" );		}			/**		 * Handle socket data  arriving.		 */		private function socketDataHandler(e : DataEvent) : void {			Logger.$.notice( this, "e.data =>" + e.data.toString( ) );			var socketData : XML = new XML( e.data );			var isHello : Boolean = (socketData.name( ) == 'hello_world');			if(isHello) {						addChild( new Rect( 200, 200, MathBase.random( 0, Canvas.stage.stageWidth - 200 ), MathBase.random( 0, Canvas.stage.stageHeight - 200 ), 0, ColorUtil.randomColor( ), 0.25 ) );			}			}		// SOCKET RX/TX DATA HANDLERS				/**		 * Join the Sekati socket application "channel".		 */		private function joinSocketChannel() : void {			Logger.$.notice( this, "Joining Sekati Socket Application 'Channel': " + SOCKET_CHANNEL );			sekatiSock.send( SOCKET_CHANNEL + PersistentXMLSocket.SOCKET_NULL_CHAR );		}			/**		 * After joining the channel - say hello to the other viewers!		 */		private function sendHelloWorld() : void {			var hello : String = "<hello_world/>";			Logger.$.notice( this, "Sending 'Hello World' xml node to all connected clients: " + hello );			sekatiSock.send( new XML( hello ) );		}						}}